name: CI/CD - Deploy to EC2

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker build
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/coffeebreakcloud/cloudchallenger:latest
  
  infraestructura:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: us-east-1
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -no-color
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
  
  deploy:
    runs-on: ubuntu-latest
    needs: [infraestructura,build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: EC2 Public IP
        run: |
          IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ubuntu-instance" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > CodeChallenger.pem
          chmod 400 CodeChallenger.pem

      - name: SSH into EC2 and run commands
        run: |
          ssh -o StrictHostKeyChecking=no -i CodeChallenger.pem ubuntu@$EC2_IP << 'EOF'
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
               docker pull ${{ secrets.DOCKER_USERNAME }}/coffeebreakcloud/cloudchallenger:latest
              docker images
          EOF
